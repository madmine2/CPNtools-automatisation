pour "archive", à supprimer une fllllois qu'on sait que tout fonctionne

import xml.etree.ElementTree as ET

def lire_premiere_ligne_et_reste(fichier):
    # Lire la première ligne (qui n'est pas XML)
    premiere_ligne = fichier.readline().strip()
    
    # Lire le reste du fichier comme un document XML
    contenu_xml = fichier.read()

    return premiere_ligne, contenu_xml

def traiter_document_xml(contenu_xml):
    # Analyser le document XML
    arbre = ET.ElementTree(ET.fromstring(contenu_xml))
    racine = arbre.getroot()

    # Parcourir les éléments pour récupérer les données
    for audit_trail_entry_element in racine.findall(".//AuditTrailEntry"):
        data_value = audit_trail_entry_element.find(".//Attribute[@name='0']").text
        workflow_model_element_value = audit_trail_entry_element.find("WorkflowModelElement").text
        event_type_value = audit_trail_entry_element.find("EventType").text
        timestamp_value = audit_trail_entry_element.find("Timestamp").text
        originator_value = audit_trail_entry_element.find("Originator").text

        # Utilisez les valeurs récupérées selon vos besoins
        print(f"Data: {data_value}")
        print(f"Workflow Model Element: {workflow_model_element_value}")
        print(f"Event Type: {event_type_value}")
        print(f"Timestamp: {timestamp_value}")
        print(f"Originator: {originator_value}")
        print("\n")

# Chemin vers le fichier .cpnxml
fichier_cpnxml = 'logsCPN\case2962.cpnxml'

# Ouvrir le fichier en mode lecture
with open(fichier_cpnxml, 'r') as fichier:
    # Lire la première ligne et le reste du fichier
    premiere_ligne, contenu_xml = lire_premiere_ligne_et_reste(fichier)

    # Afficher la première ligne (si nécessaire)
    print(f"Première ligne : {premiere_ligne}")

    # Traiter le reste du fichier comme un document XML
    traiter_document_xml(contenu_xml)


# Fonction pour créer un élément AuditTrailEntry
def create_audit_trail_entry(data, workflow_model_element, event_type, timestamp, originator):
    entry = ET.Element("AuditTrailEntry")
    
    data_element = ET.Element("Data")
    attribute0 = ET.Element("Attribute", name="0")
    attribute0.text = data
    data_element.append(attribute0)
    entry.append(data_element)

    workflow_model_element_element = ET.Element("WorkflowModelElement")
    workflow_model_element_element.text = workflow_model_element
    entry.append(workflow_model_element_element)

    event_type_element = ET.Element("EventType")
    event_type_element.text = event_type
    entry.append(event_type_element)

    timestamp_element = ET.Element("Timestamp")
    timestamp_element.text = timestamp
    entry.append(timestamp_element)

    originator_element = ET.Element("Originator")
    originator_element.text = originator
    entry.append(originator_element)

    return entry

# Chemin vers le fichier .mxml de sortie
fichier_mxml = 'new_data_mxml.mxml'

# Créer un nouvel arbre XML
nouvel_arbre = ET.Element("WorkflowLog", attrib={"xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance", "xsi:noNamespaceSchemaLocation": "http://is.tm.tue.nl/research/processmining/SAMXML.xsd", "description": "CPN Tools simulation log"})
source_element = ET.SubElement(nouvel_arbre, "Source", attrib={"program": "CPN Tools simulation"})
process_element = ET.SubElement(nouvel_arbre, "Process", attrib={"id": "DEFAULT", "description": "Simulated process"})

# Ajouter une instance de processus avec plusieurs AuditTrailEntry
process_instance_1 = ET.SubElement(process_element, "ProcessInstance", attrib={"id": "1010", "description": "Simulated process instance"})

# Ajouter plusieurs AuditTrailEntry à process_instance_1
audit_trail_entries_1 = [
    create_audit_trail_entry("1", "Salle d'attente adultes", "complete", "1970-01-01T02:35:00.000+01:00", "3"),
    create_audit_trail_entry("1", "Vers box de confid.", "complete", "1970-01-01T02:35:00.000+01:00", "3"),
    # Ajouter d'autres entrées pour process_instance_1...
]

process_instance_1.extend(audit_trail_entries_1)

# Ajouter d'autres instances de processus avec des AuditTrailEntry...

# Créer un nouvel arbre XML
nouvel_arbre = ET.ElementTree(nouvel_arbre)

# Écrire l'arbre XML dans le fichier .mxml
nouvel_arbre.write(fichier_mxml)


---------------------------------------------------------------------------------
"""# Ignorer la première ligne et traiter le reste ligne par ligne
for ligne in fichier:
    # Concaténer la première ligne avec la ligne actuelle pour former un morceau XML
    morceau_xml = f"{premiere_ligne}\n{ligne}"

    try:
        # Analyser le morceau XML
        element = ET.fromstring(morceau_xml)

        # Utilisez les valeurs récupérées selon vos besoins
        data_value = element.find(".//Attribute[@name='0']").text
        workflow_model_element_value = element.find("WorkflowModelElement").text
        event_type_value = element.find("EventType").text
        timestamp_value = element.find("Timestamp").text
        originator_value = element.find("Originator").text

        print(f"Data: {data_value}")
        print(f"Workflow Model Element: {workflow_model_element_value}")
        print(f"Event Type: {event_type_value}")
        print(f"Timestamp: {timestamp_value}")
        print(f"Originator: {originator_value}")
        print("\n")
    except ET.ParseError as e:
        # Ignorer les lignes qui ne peuvent pas être analysées en tant que morceau XML
        print(f"Ignorer la ligne non XML : {ligne.strip()}")

            
            # Ouvrir le fichier CSV en mode lecture
            with open(cpnxml_path, 'r') as fichier:
                # Créer un lecteur CSV
                lecteur_csv = csv.reader(fichier)
                # Lire la première ligne
                premiere_ligne = next(lecteur_csv)
                # Afficher la première ligne
                print("Première ligne:", premiere_ligne)
                # Lire le reste des lignes
                reste_des_lignes = list(lecteur_csv)
                # Afficher le reste des lignes
                #print("Reste des lignes:", reste_des_lignes)
            

            # Analyser le fichier .cpnxml
            arbre = ET.parse(cpnxml_path)
            racine = arbre.getroot()

            # Parcourir les éléments pour récupérer les données
            for process_instance_element in racine.findall(".//ProcessInstance"):
                process_instance_id = process_instance_element.get("id")
                process_instance_description = process_instance_element.get("description")

                # Parcourir les AuditTrailEntry pour cette instance de processus
                for audit_trail_entry_element in process_instance_element.findall(".//AuditTrailEntry"):
                    data_value = audit_trail_entry_element.find(".//Attribute[@name='0']").text
                    workflow_model_element_value = audit_trail_entry_element.find("WorkflowModelElement").text
                    event_type_value = audit_trail_entry_element.find("EventType").text
                    timestamp_value = audit_trail_entry_element.find("Timestamp").text
                    originator_value = audit_trail_entry_element.find("Originator").text

                    # Utilisez les valeurs récupérées selon vos besoins
                    print(f"Process Instance ID: {process_instance_id}")
                    print(f"Data: {data_value}")
                    print(f"Workflow Model Element: {workflow_model_element_value}")
                    print(f"Event Type: {event_type_value}")
                    print(f"Timestamp: {timestamp_value}")
                    print(f"Originator: {originator_value}")
                    print("\n")
            """

-------------------------------------------------------------------------------------------

import os
import xml.etree.ElementTree as ET
from lxml import etree


def convert_folder_to_xml(input_folder, output_file):
    # Créer le document XML global
    global_root = ET.Element("GlobalRootElement")
    i = 0
    # Parcourir tous les fichiers dans le dossier
    for filename in os.listdir(input_folder):
        if filename.endswith(".cpnxml"):
            cpnxml_path = os.path.join(input_folder, filename)
            
            # Charger le fichier .cpnxml
            tree = ET.parse(cpnxml_path)
            root = tree.getroot()
            
            # Lire la première ligne
            premiere_ligne = root[0].text.strip()
            print("Première ligne:", premiere_ligne)

            # Lire le reste des lignes
            reste_des_lignes = []

            for entry in root[1:]:
                data = entry.find('Data')
                workflow_model_element = entry.find('WorkflowModelElement').text.strip()
                event_type = entry.find('EventType').text.strip()
                timestamp = entry.find('Timestamp').text.strip()
                originator = entry.find('Originator').text.strip()

                # Ajouter les informations extraites à la liste
                ligne = {
                    'Data': data.text.strip(),
                    'WorkflowModelElement': workflow_model_element,
                    'EventType': event_type,
                    'Timestamp': timestamp,
                    'Originator': originator
                }
                reste_des_lignes.append(ligne)

            # Afficher le reste des lignes
            print("Reste des lignes:", reste_des_lignes)
            # Ajouter le contenu du fichier .cpnxml au document global
            global_root.extend(root)
            
            #except ET.ParseError as e:
            #    print(f"Erreur lors de la lecture de {cpnxml_path}: {e}")
            #    i += 1

    print(i)
    if 'tree' in locals():  # Vérifiez si 'tree' est déclarée
        # Créer un nouvel arbre avec le document global
        global_tree = ET.ElementTree(global_root)

        # Sauvegarder en tant que fichier .xml
        global_tree.write(output_file)


def add_root_element(cpnxml_file_path):

    #try:

    # Charger le fichier .cpnxml
    tree = ET.parse(cpnxml_file_path)
    print(f'tree {tree}')
    root = tree.getroot()
    print(root)

    # Vérifier si l'élément racine existe
    if root.tag != 'Root':
        print(root)
        # Créer un nouvel élément racine et déplacer le contenu existant en dessous
        new_root = ET.Element('Root')
        new_root.extend(root)

        # Créer un nouvel arbre avec le nouvel élément racine
        new_tree = ET.ElementTree(new_root)

        # Sauvegarder en tant que fichier .xml
        new_tree.write(cpnxml_file_path)
    #except ET.ParseError as e:
    #    print(f"Erreur lors de la lecture de {cpnxml_file_path}: {e}")

def add_root_to_folder(input_folder):
    # Parcourir tous les fichiers dans le dossier
    for filename in os.listdir(input_folder):
        if filename.endswith(".cpnxml"):
            cpnxml_file_path = os.path.join(input_folder, filename)
            add_root_element(cpnxml_file_path)

#add_root_to_folder('logsCPN')

# Exemple d'utilisation
convert_folder_to_xml('logsCPN', 'data.xml')

